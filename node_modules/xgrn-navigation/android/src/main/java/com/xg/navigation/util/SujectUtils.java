package com.xg.navigation.util;

import android.support.annotation.NonNull;
import android.util.Log;

import java.util.HashMap;
import java.util.Map;

import io.reactivex.Observable;
import io.reactivex.android.schedulers.AndroidSchedulers;
import io.reactivex.functions.Consumer;
import io.reactivex.schedulers.Schedulers;
import io.reactivex.subjects.PublishSubject;
import io.reactivex.subjects.Subject;

/**
 * Created by zhoucp on 2018/3/26.
 */

public class SujectUtils {
    private  Map<String,Subject> mBusMap;
    private static SujectUtils instance;
//    Subject<Object> mBus;

    private SujectUtils() {
        mBusMap=new HashMap<String,Subject>();
        init();
    }

    private void init() {

    }

    public static SujectUtils getInstance() {
        if (instance==null)
            instance=new SujectUtils();

        return instance;
    }

    public void post(String eventName,@NonNull Object obj) {
        Subject<Object> mBus;
        if (mBusMap.containsKey(eventName)){
            mBus =mBusMap.get(eventName);
        }else {
            mBus = PublishSubject.create().toSerialized();
            mBusMap.put(eventName,mBus);
        }
        mBus.onNext(obj);
    }

    public <T> Observable getAndFilter(String eventName, Class<T> tClass) {
        Subject<Object> mBus;
        if (mBusMap.containsKey(eventName)){
            mBus =mBusMap.get(eventName);
        }else {
            mBus = PublishSubject.create().toSerialized();
            mBusMap.put(eventName,mBus);
        }
        return mBus.ofType(tClass).subscribeOn(Schedulers.io())
                .observeOn(AndroidSchedulers.mainThread());
    }

    public Observable get(String eventName) {
        Subject<Object> mBus;
        if (mBusMap.containsKey(eventName)){
            mBus =mBusMap.get(eventName);
        }else {
            mBus = PublishSubject.create().toSerialized();
            mBusMap.put(eventName,mBus);
        }
        return mBus.subscribeOn(Schedulers.io())
                .observeOn(AndroidSchedulers.mainThread());
    }

    public boolean hasObservers(String eventName) {
        return mBusMap.get(eventName).hasObservers();
    }

    public void unregister(String eventName) {
        mBusMap.get(eventName).onComplete();
    }
    


}
