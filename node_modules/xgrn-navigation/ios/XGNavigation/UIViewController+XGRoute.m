//
//  UIViewController+XGRoute.m
//  XGNavigation
//
//  Created by nuomi on 2018/3/6.
//  Copyright © 2018年 demo. All rights reserved.
//

#import "UIViewController+XGRoute.h"
#import <objc/runtime.h>


@implementation UIViewController (XGRoute)


/*----------------------------是否允许侧滑手势-------------------------------*/
static const char XGAllowPopGestureRecognizer = '\0';
- (void)setAllowPopGestureRecognizer:(NSNumber *)allowPopGestureRecognizer{
    [self willChangeValueForKey:@"allowPopGestureRecognizer"]; // KVO
    objc_setAssociatedObject(self, &XGAllowPopGestureRecognizer,
                             allowPopGestureRecognizer, OBJC_ASSOCIATION_RETAIN);
    [self didChangeValueForKey:@"allowPopGestureRecognizer"]; // KVO
}
- (NSNumber *)allowPopGestureRecognizer{
    return objc_getAssociatedObject(self, &XGAllowPopGestureRecognizer)?:@YES;
}


/*--------------------------转场动画类型------------------------------*/
static const char XGTransitionModelKey = '\0';
- (void)setTransitionModel:(XGTransitionModel *)transitionModel{
    [self willChangeValueForKey:@"transitionModel"]; // KVO
    objc_setAssociatedObject(self, &XGTransitionModelKey,
                             transitionModel, OBJC_ASSOCIATION_RETAIN);
    [self didChangeValueForKey:@"transitionModel"]; // KVO
}
- (XGTransitionModel *)transitionModel{
    return objc_getAssociatedObject(self, &XGTransitionModelKey);
}


/*----------------------------页面路径-------------------------------*/
static const char XGPagePathKey = '\0';
- (void)setPagePath:(NSString *)pagePath{
    [self willChangeValueForKey:@"pagePath"]; // KVO
    objc_setAssociatedObject(self, &XGPagePathKey,
                             pagePath, OBJC_ASSOCIATION_COPY);
    [self didChangeValueForKey:@"pagePath"]; // KVO
}
- (NSString *)pagePath{
    return objc_getAssociatedObject(self, &XGPagePathKey);
}


/*----------------------------页面类型-------------------------------*/
static const char XGPageTypeKey = '\0';
- (void)setPageType:(NSString *)pageType{
    [self willChangeValueForKey:@"pageType"]; // KVO
    objc_setAssociatedObject(self, &XGPageTypeKey,
                             pageType, OBJC_ASSOCIATION_COPY);
    [self didChangeValueForKey:@"pageType"]; // KVO
}
- (NSString *)pageType{
    return objc_getAssociatedObject(self, &XGPageTypeKey);
}


/*----------------------------页面唯一id-------------------------------*/
static const char XGUniqueIdKey = '\0';
- (void)setUniqueId:(NSString *)uniqueId{
    [self willChangeValueForKey:@"uniqueId"]; // KVO
    objc_setAssociatedObject(self, &XGUniqueIdKey,
                             uniqueId, OBJC_ASSOCIATION_COPY);
    [self didChangeValueForKey:@"uniqueId"]; // KVO
}
- (NSString *)uniqueId{
    return objc_getAssociatedObject(self, &XGUniqueIdKey);
}


// 获取当前页面路由
- (NSDictionary *)route{
    NSMutableDictionary * dict = [NSMutableDictionary dictionary];
    NSInteger index = -1;
    // 先从路由栈中找寻找自己的位置
    if (self.navigationController && self.navigationController.viewControllers && self.navigationController.viewControllers.count) {
        for (UIViewController * viewController in self.navigationController.viewControllers) {
            if (viewController == self) {
                index = [self.navigationController.viewControllers indexOfObject:viewController];
                break;
            }
        }
    }
    // 找不到查看是否在tab中
    if(index == -1 && self.tabBarController && self.tabBarController.viewControllers && self.tabBarController.viewControllers.count){
        for (UIViewController * viewController in self.tabBarController.viewControllers) {
            if (viewController == self) {
                index = [self.tabBarController.viewControllers indexOfObject:viewController];
                break;
            }
        }
    }
    if (self.pagePath) {
        [dict setValue:self.pagePath forKey:@"pagePath"];
    }
    if (self.pageType) {
        [dict setValue:self.pageType forKey:@"pageType"];
    }
    if (self.uniqueId) {
        [dict setValue:self.uniqueId forKey:@"uniqueId"];
    }
    if (index >= 0) {
        [dict setValue:[NSNumber numberWithInteger:index] forKey:@"index"];
    }
    return dict;
}


@end
