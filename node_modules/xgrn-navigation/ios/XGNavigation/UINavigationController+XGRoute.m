//
//  UINavigationController+XGRoute.m
//  XGNavigation
//
//  Created by nuomi on 2018/3/6.
//  Copyright © 2018年 demo. All rights reserved.
//

#import "UINavigationController+XGRoute.h"
#import "UIViewController+XGRoute.h"
#import "XGRNPageController.h"
#import "XGRNTabBarController.h"
#import <objc/runtime.h>
#import "XGNavigation.h"

@implementation UINavigationController (XGRoute)

+ (void)exchangeInstanceMethod1:(SEL)method1 method2:(SEL)method2
{
    method_exchangeImplementations(class_getInstanceMethod(self, method1), class_getInstanceMethod(self, method2));
}

+ (void)load{
    [self exchangeInstanceMethod1:@selector(pushViewController:animated:) method2:@selector(xg_pushViewController:animated:)];
    [self exchangeInstanceMethod1:@selector(popViewControllerAnimated:) method2:@selector(xg_popViewControllerAnimated:)];
    [self exchangeInstanceMethod1:@selector(popToViewController:animated:) method2:@selector(xg_popToViewController:animated:)];
    [self exchangeInstanceMethod1:@selector(popToRootViewControllerAnimated:) method2:@selector(xg_popToRootViewControllerAnimated:)];
    [self exchangeInstanceMethod1:@selector(setViewControllers:animated:) method2:@selector(xg_setViewControllers:animated:)];
}


#pragma mark - 替换方法
// when push new viewController, auto insert to routeStack
- (void)xg_pushViewController:(UIViewController *)viewController animated:(BOOL)animated{
    if (!viewController.uniqueId) {
        viewController.uniqueId = [[NSUUID UUID] UUIDString];
    }
    if (!viewController.pageType) {
        viewController.pageType = @"NativePage";
    }
    if (!viewController.pagePath){
        viewController.pagePath = NSStringFromClass([viewController class]);
    }
    [self xg_pushViewController:viewController animated:animated];
}
/*---------------------需要在pop和reset返回的时候，自动清空不必要的状态栈的回调函数---------------------------------*/
// when pop viewController, auto delete last blockManager
- (nullable UIViewController *)xg_popViewControllerAnimated:(BOOL)animated{
    [self resetDelegate];
    return [self xg_popViewControllerAnimated:animated];
}

// when pop to specified viewController, auto delete which no loner user block
- (nullable NSArray<__kindof UIViewController *> *)xg_popToViewController:(UIViewController *)viewController animated:(BOOL)animated{
    [self resetDelegate];
    return [self xg_popToViewController:viewController animated:animated];
}

// when pop to root viewController, auto reset blockManager
- (nullable NSArray<__kindof UIViewController *> *)xg_popToRootViewControllerAnimated:(BOOL)animated{
    [self resetDelegate];
    return  [self xg_popToRootViewControllerAnimated:animated];
}

- (void)resetDelegate{
    UIViewController * vc = self.viewControllers[self.viewControllers.count - 1];
    if (vc.transitionModel) {
        vc.transitionModel.transitionType = XGTransitionHideFromTop;
        self.delegate = vc.transitionModel;
    } else {
        self.delegate = nil;
    }
}


//when reset viewControllers, auto reset blockManager
- (void)xg_setViewControllers:(NSArray<UIViewController *> *)viewControllers animated:(BOOL)animated{
    if(viewControllers && viewControllers.count > 1){
        NSLog(@"Error: 暂不支持一次性重置为多个viewControllers");
    }
    [self xg_setViewControllers:viewControllers animated:animated];
}



- (NSArray *)routeStack{
    NSMutableArray * array = [NSMutableArray array];
    int index = 0;
    for (UIViewController * vc in self.viewControllers) {
        NSMutableDictionary * item = [NSMutableDictionary dictionary];
        [item setValue:vc.uniqueId forKey:@"uniqueId"];
        [item setValue:vc.pageType forKey:@"pageType"];
        [item setValue:vc.pagePath forKey:@"pagePath"];
        [item setValue:[NSNumber numberWithInt:index] forKey:@"index"];
        if ([@"NativeTabPage" isEqualToString:vc.pageType] && [vc isKindOfClass:[UITabBarController class]]) {
            NSMutableArray * tabs = [NSMutableArray array];
            UITabBarController * tabVC = (UITabBarController *)vc;
            for (UIViewController * subTabVC in tabVC.viewControllers) {
                NSMutableDictionary * tabItem = [NSMutableDictionary dictionary];
                [tabItem setValue:subTabVC.uniqueId forKey:@"uniqueId"];
                [tabItem setValue:subTabVC.pageType forKey:@"pageType"];
                [tabItem setValue:subTabVC.pagePath forKey:@"pagePath"];
                [tabItem setValue:[NSNumber numberWithInt:index] forKey:@"index"];
                [tabs addObject:tabItem];
            }
            [item setValue:tabs forKey:@"tabs"];
        }
        index ++;
        [array addObject:item];
    }
    return array;
}

#pragma mark - 新增方法实现

/*
 跳转到JS页面
 @pagePath  js页面路径
 @params    js页面初始化参数，可为空
 @animated  是否携带动画
 @type      转场动画类型
 */
- (void)xg_pushJSPage:(NSString *)pagePath andParams:(NSDictionary *)params andAnimated:(BOOL)animated andTransition:(XGTransitionType)type{
    NSMutableDictionary * mutilDic = [self getMutilDicWithJSPath:pagePath andParams:params];
    if (type == XGTransitionShowFromBottom) {
        [mutilDic setObject:@"FromBottom" forKey:@"transitionsConfig"];
    }
    [XGNavigation push:mutilDic andAnimated:animated];
}


/*
 跳转到JS页面
 @pagePath  js页面路径
 @params    js页面初始化参数，可为空
 @animated  是否携带动画
 */
- (void)xg_pushJSPage:(NSString *)pagePath andParams:(NSDictionary *)params andAnimated:(BOOL)animated{
    NSMutableDictionary * mutilDic = [self getMutilDicWithJSPath:pagePath andParams:params];
    [XGNavigation push:mutilDic andAnimated:animated];
}

- (void)xg_pushViewControllerByConfig:(NSDictionary *)pageConfig andAnimated:(BOOL)animated{
    [XGNavigation push:pageConfig andAnimated:animated];
}

- (void)xg_popToRoute:(NSDictionary *)route andAnimated:(BOOL)animated{
    [XGNavigation popToRoute:route andAnimated:animated];
}

- (NSMutableDictionary *)getMutilDicWithJSPath:(NSString *)pagePath andParams:(NSDictionary *)params{
    NSMutableDictionary * mutilDic = [NSMutableDictionary dictionary];
    if (XGSafeString(pagePath)) {
        [mutilDic setObject:pagePath forKey:@"pagePath"];
    }
    if (XGSafeDictionary(params)) {
        [mutilDic setObject:params forKey:@"params"];
    }
    [mutilDic setObject:@"JSPage" forKey:@"pageType"];
    [mutilDic setObject:@"FromRight" forKey:@"transitionsConfig"];
    return mutilDic;
}


// 弹框展示路由栈或者应用窗口上
- (NSString *)xg_alert:(NSString *)alertPath andParams:(NSDictionary *)params andLevel:(XGAlertLevel)alertLevel{
    if (!XGSafeString(alertPath)) {
        return nil;
    }
    NSMutableDictionary * mutilDic = [NSMutableDictionary dictionary];
    [mutilDic setObject:alertPath forKey:@"alertPath"];
    if (XGSafeDictionary(params)) {
        [mutilDic setObject:params forKey:@"setObject"];
    }
    if (alertLevel == XGNavigationLevel) {
        [mutilDic setObject:@"NavigationLevel" forKey:@"level"];
    } else if (alertLevel == XGWindowLevel) {
        [mutilDic setObject:@"WindowLevel" forKey:@"level"];
    } else {
        return nil;
    }
    return [XGNavigation xg_Alert:params];
}
// 弹框展示到页面
- (NSString *)xg_alertOnPage:(NSString *)alertPath andParams:(NSDictionary *)params andBindRoute:(NSDictionary *)bindRoute{
    if (!XGSafeString(alertPath)) {
        return nil;
    }
    if (!XGSafeDictionary(bindRoute)){
        return nil;
    }
    NSMutableDictionary * mutilDic = [NSMutableDictionary dictionary];
    [mutilDic setObject:alertPath forKey:@"alertPath"];
    if (XGSafeDictionary(params)) {
        [mutilDic setObject:params forKey:@"params"];
    }
    [mutilDic setObject:bindRoute forKey:@"bindRoute"];
    [mutilDic setObject:@"PageLevel" forKey:@"level"];
    return [XGNavigation xg_Alert:mutilDic];
}

// 弹框是否展示
- (BOOL)xg_alertIsShow:(NSString *)alertId{
    return [XGNavigation xg_alertIsShow:alertId];
}


// 移除弹框
- (void)xg_removeAlert:(NSString *)alertId{
    [XGNavigation xg_removeAlert:alertId];
}


@end
