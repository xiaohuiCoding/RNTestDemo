//
//  RCTXGOAPhotoBrowserTool.m
//  SampleAppMovies
//
//  Created by 王定方 on 2018/4/19.
//  Copyright © 2018年 Facebook. All rights reserved.
//

#import "RCTXGOAPhotoBrowserTool.h"
#import "XGOAPhotoBrowser.h"
#import <NSObject+YYModel.h>

///js传入的参数
#define XGOAImageUrls @"imageUrls"
#define XGOALocalImages @"localImages"
#define XGOACurrentIndex @"currentIndex"
#define XGOAStartAnimateFrame @"startAnimateFrame"
#define XGOAPCDefaultImageName @"PCDefaultImageName"
#define XGOAPCCurrentImageName @"PCCurrentImageName"

///获取动画结束位置
//const NSString *getEndAnimateFrame = @"getAnimateEndFrameWithIndex";

///懒得写转换函数，直接用YYModel代替
@interface XGOAPhotoBrowserParamsFrame : NSObject <NSCoding>
@property (nonatomic, assign) CGFloat x;
@property (nonatomic, assign) CGFloat y;
@property (nonatomic, assign) CGFloat width;
@property (nonatomic, assign) CGFloat height;
@end
@implementation XGOAPhotoBrowserParamsFrame
- (id)initWithCoder:(NSCoder *)aDecoder {
  return [self yy_modelInitWithCoder:aDecoder];
}

- (void)encodeWithCoder:(NSCoder *)aCoder {
  return [self yy_modelEncodeWithCoder:aCoder];
}
@end

@interface XGOAPhotoBrowserParams : NSObject <NSCoding>
@property (nonatomic, copy) NSArray *imageUrls;
@property (nonatomic, copy) NSArray *localImages;
@property (nonatomic, assign) NSInteger startIndex;
@property (nonatomic, strong) XGOAPhotoBrowserParamsFrame *startFrame;
@property (nonatomic, readonly) CGRect startAnimateFrame;
@property (nonatomic, copy) NSString *PCDefaultImageName;
@property (nonatomic, copy) NSString *PCCurrentImageName;
@end

@implementation XGOAPhotoBrowserParams

+ (NSDictionary *)modelContainerPropertyGenericClass {
  ///名字相同的可以不用出现在下面dic中
  return @{
           @"startFrame":[XGOAPhotoBrowserParamsFrame class],
           };
}

- (CGRect)startAnimateFrame {
  return CGRectMake(self.startFrame.x, self.startFrame.y, self.startFrame.width, self.startFrame.height);
}

- (id)initWithCoder:(NSCoder *)aDecoder {
  return [self yy_modelInitWithCoder:aDecoder];
}

- (void)encodeWithCoder:(NSCoder *)aCoder {
  return [self yy_modelEncodeWithCoder:aCoder];
}

@end

@interface RCTXGOAPhotoBrowserTool ()<XGOAPhotoBrowserDelegate>
///相册参数
@property (nonatomic, strong) XGOAPhotoBrowserParams *photoBrowserParams;
//@property (nonatomic, assign) NSInteger endIndex;
@end

@implementation RCTXGOAPhotoBrowserTool
RCT_EXPORT_MODULE();

///这个控件只需要与RN协商获取动画结束的frame，所以只定义一个获取结束位置的交互方法
//- (NSArray<NSString *> *)supportedEvents {
//  return @[getEndAnimateFrame]; //这里返回的将是你要发送的消息名的数组。
//}

/**
 * JS调起原生的相册
 * params:{imageUrls:[urls],localImages:[Image],startIndex:NSInteger,startFrame:{x:,y:,width:height:} PCDefaultImageName:String,PCCurrentImageName:String}
 * imageUrls与localImages二选一即可，如果二都都有的话，就认为localImage是imageUrls的占位符（可以理解为低分变率图片）
 * 如果想改变分页指示器的图标的话可以传入下面两个名称去改变
 * PCDefaultImageName 分页指示器默认图片
 * PCCurrentImageName 分页指示器选中图片
 */
RCT_EXPORT_METHOD(showPhotoBrowserWithParams:(NSDictionary *)params) {
  ///用YYModel去解析一下参数
  self.photoBrowserParams = [XGOAPhotoBrowserParams yy_modelWithJSON:params];


  XGOAPhotoBrowser *browser = [[XGOAPhotoBrowser alloc] init];
  browser.delegate = self;
  browser.currentImageIndex = self.photoBrowserParams.startIndex;
  [browser show];
}

- (dispatch_queue_t)methodQueue {
  return dispatch_get_main_queue();
}

/**
 * 设置退出图片浏览时结束动画位置
 * 其实不用跟参数，参数是原生调JS的方法时设置的，这里添加index只是为了原生做次校验
 */
//RCT_EXPORT_METHOD(updateAnimateEndFrame:(CGRect)endFrame withIndex:(NSInteger)index) {
//  if (self.endIndex != index) {
//    return;
//  }
//
//  self.endAnimateFrame = endFrame;
//}

#pragma --mark XGOAPhotoBrowserDelegate
- (NSInteger)numberOfImageViewInphotoBrowser:(XGOAPhotoBrowser *)browser {
  return MAX(self.photoBrowserParams.imageUrls.count, self.photoBrowserParams.localImages.count);
}

- (NSURL *)photoBrowser:(XGOAPhotoBrowser *)browser highQualityImageURLForIndex:(NSInteger)index {
  if (index >= self.photoBrowserParams.imageUrls.count) {
    return nil;
  }
  NSString *imageStr = self.photoBrowserParams.imageUrls[index];
  NSURL *url = nil;;
  //判断是否是网络图片
  if([self isUrlString:imageStr]) {
    url = [NSURL URLWithString:imageStr];
  }else {
    url = [[NSBundle mainBundle] URLForResource:imageStr withExtension:nil];
  }
  return url;
}

///JS可能没有UIImage对象
- (UIImage *)photoBrowser:(XGOAPhotoBrowser *)browser placeholderImageForIndex:(NSInteger)index {
  if (index < self.photoBrowserParams.localImages.count) {
    id image = self.photoBrowserParams.localImages[index];
    if (![image isKindOfClass:[UIImage class]]) {
      return nil;
    }

    return image;
  }
  return nil;
}

///动画起始/结束位置，需要一个frame, 给JS调的时候可能没有这个frame,所有就都返回一个空，以后看能不能加个事件去取图片的frame
///如果index与起始一样的就直接返回，不一样的时候认为是结束index
- (CGRect)photoBrowser:(XGOAPhotoBrowser *)browser animteGoalFrameWithIndex:(NSInteger)index {
  ///RN界面获取控件位置比教麻烦，所以默认都认结束都从中间完结
  if (index == self.photoBrowserParams.startIndex) {
    return self.photoBrowserParams.startAnimateFrame;
  }

  return CGRectZero;
}

- (void)photoBrowserDidRemoveFromSuperView:(XGOAPhotoBrowser *)browser {
  self.photoBrowserParams = nil;
//  self.endAnimateFrame = CGRectZero;
//  self.endIndex = 0;
}

///这个没有回掉，结束位置要同步获取，要想个好的方式
//- (void)askEndAnimateWithIndex:(NSInteger)index finishBlock:(void(^)(CGRect endFrame))resultBlock{
  ///发请求给js，要求获取结束位置
//  [self sendEventWithName:getEndAnimateFrame body:{@"index":index}];
//}

//是否是网络地址
- (BOOL)isUrlString : (NSString *)str{
  //判断是否是网络图片
  if([[str lowercaseString] hasPrefix:@"http:"] || [[str lowercaseString] hasPrefix:@"https:" ]) {
    return YES;
  }else {
    return NO;
  }
}
@end
