package com.xinguang.imaglib.cycleImage.adapter;

import android.support.annotation.Nullable;
import android.support.v4.view.PagerAdapter;
import android.view.View;
import android.view.ViewGroup;

import com.xinguang.imaglib.cycleImage.bean.RecycleViewBean;
import com.xinguang.imaglib.cycleImage.view.BaseItemView;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * view 类型的viewpager适配器
 *
 * @author wl on 2017/8/16 0016 9:22
 */

public class MyViewPageAdapter<T extends Object> extends PagerAdapter {
    public List<T> datas;
    /**
     * 图片视图缓存列表
     */
    BaseItemView<T> view;
    GetView getView;
    private Map<Integer, List<View>> map;
    private boolean isMax;

    public MyViewPageAdapter(@Nullable List<T> datas, @Nullable GetView getView) {
        this.datas = datas;
        this.getView = getView;
        map = new HashMap<>();
    }

    public void setMax() {
        isMax = true;
    }

    public int getPosition(int position) {
        return datas.size() == 0 ? position : position % datas.size();
    }

    @Override
    public int getCount() {
        if (datas.size() != 0 && isMax) {
            return datas.size();
        }
        if (datas.size() != 0 && isMax == false) {
            return Integer.MAX_VALUE;
        } else {
            return 0;
        }

    }

    @Override
    public boolean isViewFromObject(View view, Object o) {
        return view == o;
    }

    @Override
    public Object instantiateItem(ViewGroup container, final int position) {
        T object = datas.get(getPosition(position));// 根据图片的位置获得图片的资源列表内容
        int type = getViewType(getPosition(position));
        try {
            view = (BaseItemView<T>) getTypeView(type);
        } catch (Exception e) {
        }
        try {
            if (view == null) {
                view = getView.getView(container.getContext(), type);
            }
        } catch (Exception e) {
        }
        view.setData(new RecycleViewBean<T>(object, position));

        container.addView(view);
        return view;
    }

    @Override
    public void destroyItem(ViewGroup container, int position, Object object) {
        View view = (View) object;
        container.removeView(view);
        addView(view, getViewType(getPosition(position)));
    }

    /**
     * 需要一个可重写的获得view类型的方法
     * @param position
     * @return
     */
    public int getViewType(int position) {
        return 0;
    }

    /**
     * 获得对应类型的缓存，并删除
     * @param type
     * @return
     */
    private View getTypeView(int type) {
        List<View> views = map.get(type);
        if (views == null || views.size() == 0) {
            return null;
        } else {
            return views.remove(0);
        }
    }

    //添加view
    private void addView(View view, int type) {
        List<View> views = map.get(type);
        if (views == null) {
            views = new ArrayList<>();
            map.put(type, views);
        }
        views.add(view);
    }
}
