package com.xinguang.imaglib.cycleImage.utils;

import android.app.Activity;
import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.Rect;
import android.util.DisplayMetrics;
import android.view.View;
import android.view.WindowManager;

/**
 * 屏幕工具类，涉及到屏幕宽度、高度、密度比、(像素、dp、sp)之间的转换等
 *
 * @author hzguojujun on 2015-12-18
 */
public class ScreenUtil {
    /**
     * 获取屏幕宽度，单位为px
     *
     * @param context 应用程序上下文
     * @return 屏幕宽度，单位px
     */
    public static int getScreenWidth(Context context) {
        DisplayMetrics dm = getDisplayMetrics(context);

        if (dm != null) {
            return dm.widthPixels;
        } else {
            return 0;
        }
    }

    /**
     * 获固定比例的高度
     *
     * @param width 宽度值
     * @return 屏幕高度，单位px
     */
    public static int getMissScaleHeight(int width) {
        return width * 235 / 345;
    }

    /**
     * 获取屏幕高度，单位为px
     *
     * @param context 应用程序上下文
     * @return 屏幕高度，单位px
     */
    public static int getScreenHeight(Context context) {
        DisplayMetrics dm = getDisplayMetrics(context);

        if (dm != null) {
            return dm.heightPixels;
        } else {
            return 0;
        }
    }

    /**
     * 获取系统dp尺寸密度值
     *
     * @param context 应用程序上下文
     */
    public static float getDensity(Context context) {
        DisplayMetrics dm = getDisplayMetrics(context);

        if (dm != null) {
            return dm.density;
        } else {
            return 0;
        }
    }

    /**
     * 获取系统字体sp密度值
     *
     * @param context 应用程序上下文
     */
    public static float getScaledDensity(Context context) {
        DisplayMetrics dm = getDisplayMetrics(context);

        if (dm != null) {
            return dm.scaledDensity;
        } else {
            return 0;
        }
    }

    /**
     * dip转pixel
     */
    public static int dip2px(Context context, float dipValue) {
        if (context == null) {
            return 0;
        }

        final float scale = context.getResources().getDisplayMetrics().density;
        return (int) (dipValue * scale + 0.5f);
    }

    /**
     * pixel转dip
     */
    public static int px2dip(Context context, float pxValue) {
        if (context == null) {
            return 0;
        }

        final float scale = context.getResources().getDisplayMetrics().density;
        return (int) (pxValue / scale + 0.5f);
    }

    /**
     * pixel转dip
     *
     * @param pxValue 像素
     * @return dp
     */
    public static int px2dip(float pxValue) {
        return (int) (pxValue / 2 + 0.5f);
    }

    /**
     * 将sp值转换为px值，保证文字大小不变
     *
     * @param spValue （DisplayMetrics类中属性scaledDensity）
     */
    public static int sp2px(Context context, float spValue) {
        final float fontScale = context.getResources().getDisplayMetrics().scaledDensity;
        return (int) (spValue * fontScale + 0.5f);
    }

    /**
     * 获得状态栏的高度
     */
    public static int getStatusHeight(Context context) {
        int statusHeight = -1;
        try {
            Class<?> clazz = Class.forName("com.android.internal.R$dimen");
            Object object = clazz.newInstance();
            int height =
                    Integer.parseInt(clazz.getField("status_bar_height").get(object).toString());
            statusHeight = context.getResources().getDimensionPixelSize(height);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return statusHeight;
    }

    /**
     * 获取DisplayMetrics对象
     *
     * @param context 应用程序上下文
     */
    public static DisplayMetrics getDisplayMetrics(Context context) {
        if (context == null) {
            return null;
        }

        WindowManager windowManager =
                (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);
        DisplayMetrics displayMetrics = new DisplayMetrics();
        windowManager.getDefaultDisplay().getMetrics(displayMetrics);
        return displayMetrics;
    }

    /**
     * 获取屏幕分辨率
     */
    public static String getResolution(Context context) {
        DisplayMetrics dm = new DisplayMetrics();
        WindowManager WM = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);
        WM.getDefaultDisplay().getMetrics(dm);
        StringBuffer buffer = new StringBuffer();
        buffer.append(dm.widthPixels).append('x').append(dm.heightPixels);
        return buffer.toString();
    }

    /**
     * 获取当前屏幕截图，包含状态栏
     */
    public static Bitmap snapShotWithStatusBar(Activity activity) {
        View view = activity.getWindow().getDecorView();
        //设置缓存
        view.setDrawingCacheEnabled(true);
        //构建缓存
        view.buildDrawingCache();
        //从缓存中获取当前图片
        Bitmap bmp = view.getDrawingCache();

        int width = getScreenWidth(activity);
        int height = getScreenHeight(activity);
        Bitmap bp = null;
        bp = Bitmap.createBitmap(bmp, 0, 0, width, height);
        //清除缓存
        view.destroyDrawingCache();
        return bp;
    }

    /**
     * 获取当前屏幕截图，不包含状态栏
     * int top = rect.top;     //状态栏的高度，所以rect.height,rect.width分别是系统的高度的宽度
     * View v = getWindow().findViewById(Window.ID_ANDROID_CONTENT);///获得根视图
     * int top2 = v.getTop();      //状态栏标题栏的总高度,所以标题栏的高度为top2-top
     * int width = v.getWidth();   //视图的宽度,这个宽度好像总是最大的那个
     * int height = v.getHeight(); //视图的高度，不包括状态栏和标题栏
     */
    public static Bitmap snapShotWithoutStatusBar(Activity activity) {
        View view = activity.getWindow().getDecorView();
        view.setDrawingCacheEnabled(true);
        view.buildDrawingCache();
        Bitmap bmp = view.getDrawingCache();

        //获取状态栏的高度
        Rect frame = new Rect();
        activity.getWindow().getDecorView().getWindowVisibleDisplayFrame(frame);
        int statusBarHeight = frame.top;

        int width = getScreenWidth(activity);
        int height = getScreenHeight(activity);
        Bitmap bp = null;
        bp = Bitmap.createBitmap(bmp, 0, statusBarHeight, width, height - statusBarHeight);
        view.destroyDrawingCache();
        return bp;
    }
}
