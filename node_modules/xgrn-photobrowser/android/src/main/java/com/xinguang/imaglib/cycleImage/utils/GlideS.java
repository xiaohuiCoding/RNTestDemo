package com.xinguang.imaglib.cycleImage.utils;

import android.graphics.Bitmap;
import android.graphics.BitmapShader;
import android.graphics.Canvas;
import android.graphics.Matrix;
import android.graphics.Paint;
import android.graphics.RectF;
import android.graphics.Shader;
import android.widget.ImageView;

import com.bumptech.glide.Glide;
import com.bumptech.glide.Priority;
import com.bumptech.glide.request.RequestOptions;
import com.xinguang.imaglib.R;

/**
 * Created by wanglin on 2016/10/31 22:20.
 */

public class GlideS {
    public static String img_path = "http://172.18.0.247/image/";

    /**
     * 适合尺寸缓存
     */
    public static void result(String uil, final ImageView imageView) {
        Object tag = imageView.getTag();
        Glide.with(imageView.getContext()).load(uil).apply(options)
                .into(imageView);
        imageView.setTag(tag);
    }

    static RequestOptions options =
            new RequestOptions().centerCrop().placeholder(R.mipmap.base_icon)//占位符
                    .error(R.mipmap.base_icon).priority(Priority.IMMEDIATE);

    /**
     * 需要一个自带占位符的加载方法
     *
     * @param uil
     * @param imageView
     */
    public static void result1(String uil, final ImageView imageView, int placeholder) {
        Glide.with(imageView.getContext()).load(uil).apply(new RequestOptions().centerCrop().placeholder(placeholder)//占位符
                .error(placeholder).priority(Priority.IMMEDIATE))
                .into(imageView);

    }


    /**
     * .9 有占位符
     */
    static RequestOptions requestOptionsBase =
            new RequestOptions().placeholder(R.mipmap.base_icon9)//占位符
                    .error(R.mipmap.base_icon9).priority(Priority.IMMEDIATE);
    /**
     * 原图显示  没有占位符
     */
    public static void resultz(String uil, final ImageView imageView) {
        Glide.with(imageView.getContext()).load(uil).into(imageView);
    }

    /**
     * 全尺寸缓存
     * <p>
     * //获取imageview想要显示的宽和高
     * ImageSize imageViewSize = ImageSizeUtil.getImageViewSize(imageview);
     * opts.inSampleSize = ImageSizeUtil.caculateInSampleSize(opts,
     * imageViewSize.width, imageViewSize.height);
     * <p>
     * opts.inJustDecodeBounds = false;
     * is.reset();
     * bitmap = BitmapFactory.decodeStream(is, null, opts);
     */



    /**
     * 可以设置占位图的icon  支持gif
     *
     * @param uil
     * @param imageView
     */
    public static void all(String uil, final ImageView imageView, int placeholder) {
        RequestOptions priority = null;
        if (placeholder != -1) {
            priority = new RequestOptions().centerCrop().placeholder(placeholder)//占位符
                    .error(placeholder).priority(Priority.IMMEDIATE);
            if (uil.endsWith(".gif") || uil.endsWith(".GIF")) {
                Glide.with(imageView.getContext()).asGif().load(uil) //判断加载的url资源是否为gif格式的资源
                        .apply(priority).into(imageView);
            } else {
                Glide.with(imageView.getContext()).asBitmap().load(uil).apply(priority).into(imageView);
            }
        } else {
            if (uil.endsWith(".gif") || uil.endsWith(".GIF")) {
                Glide.with(imageView.getContext()).asGif().load(uil) //判断加载的url资源是否为gif格式的资源
                        .into(imageView);
            } else {
                Glide.with(imageView.getContext()).asBitmap().load(uil).into(imageView);
            }
        }


    }








    /**
     * 利用BitmapShader绘制圆角图片
     *
     * @param bitmap    待处理图片
     * @param outWidth  结果图片宽度，一般为控件的宽度
     * @param outHeight 结果图片高度，一般为控件的高度
     * @param radius    圆角半径大小
     * @return 结果图片
     */
    private static Bitmap roundBitmapByShader(Bitmap bitmap, int outWidth, int outHeight,
                                              int radius) {
        if (bitmap == null) {
            throw new NullPointerException("Bitmap can't be null");
        }
        // 初始化缩放比
        float widthScale = outWidth * 1.0f / bitmap.getWidth();
        float heightScale = outHeight * 1.0f / bitmap.getHeight();
        Matrix matrix = new Matrix();
        matrix.setScale(widthScale, heightScale);

        // 初始化绘制纹理图
        BitmapShader bitmapShader =
                new BitmapShader(bitmap, Shader.TileMode.CLAMP, Shader.TileMode.CLAMP);
        // 根据控件大小对纹理图进行拉伸缩放处理
        bitmapShader.setLocalMatrix(matrix);

        // 初始化目标bitmap
        Bitmap targetBitmap = Bitmap.createBitmap(outWidth, outHeight, Bitmap.Config.ARGB_8888);

        // 初始化目标画布
        Canvas targetCanvas = new Canvas(targetBitmap);

        // 初始化画笔
        Paint paint = new Paint();
        paint.setAntiAlias(true);
        paint.setShader(bitmapShader);

        // 利用画笔将纹理图绘制到画布上面
        targetCanvas.drawRoundRect(new RectF(0, 0, outWidth, outWidth), radius, radius, paint);

        return targetBitmap;
    }

    /**
     * 一些图片 有展位图  但是由于屏幕原因变形了 导致图片显示不全
     * 使用。9的展位图
     * 加载方式需要设置成  FIT_XY
     */
    public static void resultBase(String uil, final ImageView imageView) {
        Glide.with(imageView.getContext()).load(uil).apply(requestOptionsBase)
                .into(imageView);
    }



}
