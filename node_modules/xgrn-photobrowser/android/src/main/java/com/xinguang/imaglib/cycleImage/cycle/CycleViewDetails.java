package com.xinguang.imaglib.cycleImage.cycle;

import android.content.Context;
import android.support.annotation.AttrRes;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.support.v4.view.ViewPager;
import android.util.AttributeSet;
import android.widget.LinearLayout;

import com.xinguang.imaglib.R;
import com.xinguang.imaglib.cycleImage.BaseFrameLayout;
import com.xinguang.imaglib.cycleImage.adapter.GetView;
import com.xinguang.imaglib.cycleImage.adapter.MyViewPageAdapter;
import com.xinguang.imaglib.cycleImage.view.BaseItemVideoView;
import com.xinguang.imaglib.cycleImage.view.BaseItemView;
import com.xinguang.imaglib.cycleImage.view.CycleViewUtils;

import java.util.ArrayList;
import java.util.List;

/**
 * 详情页的轮播  ，单独出来有它负责
 *
 * @author wl on 2017/9/6 0006 14:16
 */

public class CycleViewDetails extends BaseFrameLayout
        implements GetView, ViewPager.OnPageChangeListener {
    ScreenSwitchManager screenSwitchManager;
    ViewPager viewPager;
    LinearLayout line;

    MyViewPageAdapter adapter;
    CycleViewUtils cycleViewUtils;

    public CycleViewDetails(@NonNull Context context) {
        super(context);
    }

    public CycleViewDetails(@NonNull Context context, @Nullable AttributeSet attrs) {
        super(context, attrs);
    }

    public CycleViewDetails(@NonNull Context context, @Nullable AttributeSet attrs,
                            @AttrRes int defStyleAttr) {
        super(context, attrs, defStyleAttr);
    }

    @Override
    public void init() {
        setContentView(R.layout.view_cycle_details);
        viewPager = getView(R.id.view_pager);
        line = getView(R.id.line);
    }

    @Override
    public void initData() {


    }

    /**
     * @param video   视频地址集合
     * @param pic     图片地址集合
     * @param address 视频封面
     */
    public void setCycleDatas(List<String> video, List<String> pic, String address) {
        List<VideoImageBean> list = new ArrayList<>();
        if (video == null) {

        } else {
            for (int i = 0; i < video.size(); i++) {

                list.add(new VideoImageBean(1, video.get(i), address));
            }
        }
        if (pic == null) {

        } else {
            for (int i = 0; i < pic.size(); i++) {
                list.add(new VideoImageBean(0, pic.get(i)));
            }
        }
        setCycleDatas(list);
    }

    /**
     * 将需要的数据给我
     */
    public void setCycleDatas(List<VideoImageBean> list) {
        adapter = new ImageVideoAdapter(list, this);
        cycleViewUtils = new CycleViewUtils(context, viewPager, line, adapter, list.size());
        cycleViewUtils.setLineColor(R.color.black, R.color.c_999999);
        viewPager.setOnPageChangeListener(this);
        viewPager.setOffscreenPageLimit(10);
        line.setVisibility(INVISIBLE);

        screenSwitchManager = ScreenSwitchManager.getInstance();
        if(screenSwitchManager==null){
            screenSwitchManager= ScreenSwitchManager.init(context);
        }
        //初始化第一个是不是视频
        if (list.size() > 0 && list.get(0).type == 1) {
            screenSwitchManager.setShowVideoState(true);
        }
    }

    List<BaseItemVideoView> views = new ArrayList<>();
    BaseItemVideoView view;

    @Override
    public BaseItemView getView(Context context, int type) {
        view = null;
        if (type == 0) {
            view = new DetailsSeasonView(context);
        } else if (type == 1) {
//            view = new DetailsVideoView(context);
        }
        if (view != null) {
            views.add(view);
        }
        return view;
    }

    @Override
    public void onPageScrolled(int i, float v, int i1) {

    }

    @Override
    public void onPageSelected(int position) {

        cycleViewUtils.setPageSelected(position);
        //切换的时候关闭所有
        // TODO: 2017/12/6 停止播放
        stopVideo();
        //当第一页 不显示指示器
        if (adapter.getViewType(adapter.getPosition(position)) == 1) {
            screenSwitchManager.setShowVideoState(true);
            line.setVisibility(INVISIBLE);
        } else {
            screenSwitchManager.setShowVideoState(false);
            line.setVisibility(VISIBLE);
        }
    }

    @Override
    public void onPageScrollStateChanged(int i) {

    }

    class ImageVideoAdapter extends MyViewPageAdapter<VideoImageBean> {

        public ImageVideoAdapter(@Nullable List<VideoImageBean> datas, @Nullable GetView getView) {
            super(datas, getView);
        }

        @Override
        public int getViewType(int position) {
            return datas.get(position).getType();
        }
    }

    /**
     * 关闭视频播放
     */
    public void stopVideo() {
        for (int i = 0; i < views.size(); i++) {
            view = views.get(i);
            if (view != null) {
                view.setStop();
            }
        }
    }

    /**
     * 设置定位到第几页
     */
    public void setPosition(int position) {
        viewPager.setCurrentItem(position);
    }

    public int getPosition() {
        return viewPager.getCurrentItem();
    }


}
