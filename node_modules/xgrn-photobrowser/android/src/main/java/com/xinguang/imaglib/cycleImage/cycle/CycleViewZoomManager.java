package com.xinguang.imaglib.cycleImage.cycle;


/**
 * 详情页 轮播 缩放管理类
 * 判断 与 缩放分发
 * 无参的初始化可以使用一般的单例
 *
 * @author wl on 2017/9/4 0004 16:35
 */

public class CycleViewZoomManager extends BaseToObserve<CycleViewZoomManager.UpVideo> {
    public boolean max;//当前是否是放大
    private static CycleViewZoomManager cycleViewDetailsUtils;


    public static CycleViewZoomManager getInstance() {
        if (cycleViewDetailsUtils == null) {
            synchronized (CycleViewZoomManager.class) {
                if (cycleViewDetailsUtils == null) {
                    cycleViewDetailsUtils = new CycleViewZoomManager();
                }
            }
        }
        return cycleViewDetailsUtils;
    }


    public interface UpVideo {
        void upMin();

        void upMax();

        void upPosition(int position);
    }

    /**
     * 切换容器
     */
    public void switchContainer() {
        max = !max;
        ScreenSwitchManager.getInstance().setLargeScreenState(max);
        dispense(new DispenseUtil<UpVideo>() {
            @Override
            public void theEvent(UpVideo observe) {
                if (!max) {
                    observe.upMin();
                } else {
                    observe.upMax();
                }
            }
        });
    }

    /**
     * 添加一个设置当前页的方法，大屏返回时设置js展示页
     */
    public void setCurrPosition(final int position) {
        dispense(new DispenseUtil<UpVideo>() {
            @Override
            public void theEvent(UpVideo observe) {
                observe.upPosition(position);
            }
        });
    }

    /**
     * 当前是大屏 还是小屏  true为大屏
     * 为轮播的视图创建提供一个获得当前屏幕状态的方法
     */
    public boolean isMax() {
        return max;
    }
}
