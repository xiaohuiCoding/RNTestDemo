//
//  RCTNavigationEmitter.m
//  XGNavigation
//
//  Created by nuomi on 2018/3/5.
//  Copyright © 2018年 demo. All rights reserved.
//

#import "RCTNavigationEmitter.h"
#import "XGNavigationMacro.h"

#define JSCallBackEventEmitterEventName @"XGNavigationCallBackEvent"
#define JSTabClickEmitterEventName @"XGNavigationTabClick"

@implementation RCTNavigationEmitter

RCT_EXPORT_MODULE();

@synthesize bridge = _bridge;

- (NSArray<NSString *> *)supportedEvents{
    return @[JSCallBackEventEmitterEventName,JSTabClickEmitterEventName];
}
+ (BOOL)requiresMainQueueSetup
{
    return YES;
}

static NSMutableDictionary  *CallBackStack;

// 添加注册回调函数
void RegisterCallBackFunc(NSString * callBackId, JSCallBackBlock callBack)
{
    static dispatch_once_t onceToken;
    dispatch_once(&onceToken, ^{
        CallBackStack = [NSMutableDictionary dictionary];
    });
    [CallBackStack setObject:callBack forKey:callBackId];
}

// 移除注册回调函数
void UnRegisterCallBackFunc(NSString * callBackId)
{
    if (XGSafeDictionary(CallBackStack)) {
        [CallBackStack removeObjectForKey:callBackId];
    }
}


// 注册回调函数
+ (void)registerCallBackBy:(NSString *)callBackID andCallBack:(JSCallBackBlock)callBack{
    RegisterCallBackFunc(callBackID,callBack);
}

// 移除callBack
+ (void)unregisterCallBackBy:(NSString *)callBackID{
    UnRegisterCallBackFunc(callBackID);
}


// 执行回调给原声
RCT_EXPORT_METHOD(invokeNativeCallBack:(NSDictionary *)info)
{
    info = info ?: @{};
    NSString * callBackID = info[@"callBackID"];
    if (!XGSafeString(callBackID)) {
        NSLog(@"Error: invokeNativeCallBack callBackId must not null %@",info);
        return;
    }
    NSDictionary * params = info[@"params"];
    JSCallBackBlock callBack = [CallBackStack objectForKey:callBackID];
    if (callBack) {
        xg_dispatch_main_async_safe(^(){
            callBack(params);
        });
    }
}

- (instancetype)init
{
    self = [super init];
    if (self) {
        [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(receivedCallBackNotification:) name:IOSNotificationEventName object:nil];
        [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(receivedTabClickNotification:) name:IOSTabClickNotificationEventName object:nil];
    }
    return self;
}

- (void)startObserving{
    [super startObserving];
}

- (void)stopObserving{
    [super stopObserving];
}

//将收到的通知返回给js
- (void)receivedCallBackNotification:(NSNotification*)notification{
    NSDictionary * info = notification.object?:@{};
    NSString * callBackID = [info objectForKey:@"callBackID"];
    if (!XGSafeString(callBackID)) {
        NSLog(@"Error: Emitter callBackId must not null %@",info);
        return;
    }
    [self sendEventWithName:JSCallBackEventEmitterEventName body:info];
}

//点击tab的通知
- (void)receivedTabClickNotification:(NSNotification*)notification{
    NSDictionary * info = notification.object?:@{};
    [self sendEventWithName:JSTabClickEmitterEventName body:info];
}

-(void)dealloc{
    if (CallBackStack) {
        [CallBackStack removeAllObjects];
    }
    [[NSNotificationCenter defaultCenter] removeObserver:self];
}

@end
