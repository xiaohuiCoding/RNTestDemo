/**
 * Created by nuomi on 2018/1/19.
 * v0.2.08
 */
import React from 'react';
import {
    Platform,
    NativeModules,
    NativeEventEmitter, //ios
    DeviceEventEmitter, //android
} from 'react-native';
import uuid from 'uuid';
import ProcessManager from './ProcessManager';
import PageDecorator from './pageDecorator/PageDecorator';// 页面修饰器
const {
    XGNavigation: NativeNavigation,
    NavigationEmitter: NativeNavigationEmitter,
} = NativeModules;
const NavigationEmitter = __IOS__ ? (new NativeEventEmitter(NativeNavigationEmitter)) : DeviceEventEmitter;
const XGNavigationCallBackEventName = 'XGNavigationCallBackEvent';//回调事件的事件名称

class XGNavigation {

    // 获取支持的页面类型
    get pageType() {
        return {
            JSPage: 'JSPage',               // JS页面
            NativePage: 'NativePage',       // 原声页面
            NativeTabPage: 'NativeTabPage', // 原声tab页面
        };
    }

    // 获取支持的转场动画类型
    get transitionsConfig() {
        return {
            FromRight: 'FromRight',  // 从右到左
            FromBottom: 'FromBottom',// 从下到上
        };
    }


    // 获取支持的展示弹框位置的层级
    get alertLevel() {
        return {
            PageLevel: 'PageLevel',             // 覆盖在页面的上层
            NavigationLevel: 'NavigationLevel',   // 覆盖在路由栈的上层
            WindowLevel: 'WindowLevel',         // 覆盖在应用窗口的上层
        };
    }

    /*----------------------------------封装js路由栈-------------------------------------*/
    // app注册的所有路由栈
    // js路由栈     pagePath:{component: XXJSPage} PageComponent 中定义了xgNavigationBarOptions 因此，依旧可以获取到
    // native路由栈 pagePath:{xgNavigationBarOptions: {}}
    appRoutes = {};

    // 弹框组件- path: XXJSAlert
    alertComponents = {};

    // 页面跳转或JS弹框参数传递时中转用的临时缓存栈，
    // 以key-params方式进行临时添加缓存，根据key进行返回并移除  key一般为唯一id
    paramsTransitStack = {};

    /**
     * 获取子路由页面
     * @param routeConfig 路由信息
     * @param path        路由模块前缀
     * @private
     */
    _getSubChildRoutes = (routeConfig, path) => {
        routeConfig.forEach((item) => {
            const {
                path: tmpPath,
                childRoutes,
                xgNavigationBarOptions,
            } = item;
            if (tmpPath && childRoutes && (childRoutes instanceof Array) && childRoutes.length) {
                //index file which contains childRoutes
                const allPath = path ? `${path}/${tmpPath}` : tmpPath;
                this._getSubChildRoutes(childRoutes, allPath);
            } else if ((!tmpPath && !childRoutes) && typeof item === 'function') {
                //Component
                const {pageName} = xgNavigationBarOptions || {};
                const name = pageName || item.name;
                //全部使用小写配置，避免大小写导致的匹配异常
                const allPath = (path ? `${path}/${name}` : name).toLowerCase();
                //添加页面修饰器
                PageDecorator(item);
                this.appRoutes[`${allPath}`] = {component: item};
            } else {
                console.error('initializeRoutes func Error: you must be import a wrong error page');
            }
        });
    };


    /**
     * 初始化项目js页面路由信息
     * @param routeConfig Array
     */
    initializeJSRoutes = (jsRouteConfig) => {
        this._getSubChildRoutes(jsRouteConfig, '');
        __DEV__ && console.log('App JS initializeJSRoutes\n' + JSON.stringify(this.appRoutes,null,4));
    };


    /**
     * 初始化项目原生页面路由信息
     * @param nativeRouteConfig Array
     *
     */
    initializeNativeRoutes = (nativeRouteConfig)=>{
        nativeRouteConfig.forEach((item) => {
            let {
                pagePath,
                xgNavigationBarOptions
            } = item;
            pagePath = this._parsePagePath(pagePath);
            if(pagePath && xgNavigationBarOptions && typeof xgNavigationBarOptions === 'object'){
                this.appRoutes[pagePath.toLowerCase()] = {xgNavigationBarOptions};
            }
        });
        __DEV__ && console.log('App JS initializeNativeRoutes\n' + JSON.stringify(this.appRoutes,null,4));
    };


    // 解析path
    _parsePagePath = (pathPath)=>{
        if(pathPath && typeof pathPath === 'object'){
            return pathPath[Platform.OS];
        }
        return pathPath;
    };

    /**
     * 根据pathPath匹配到页面组件
     * @param pathPath 页面路由
     * @return {*} 组件，可能为空
     */
    match = (pathPath) => {
        return this.appRoutes[pathPath.toLowerCase()];
    };

    /**
     * 根据初始化参数返回页面
     * @param initParams
     * @return {*} 返回值可能为一个组件，也可能为404
     */
    renderPageByConfig = (initParams) => {
        const _initParams = initParams || {};
        if (_initParams) {
            delete _initParams.selectTabBarIcon;
            delete _initParams.unSelectTabBarIcon;
        }
        const {pagePath, params, uniqueId, route} = _initParams;
        //params的获取方式可能太单一了，需要修改
        if (pagePath) {
            const ComponentInfo = this.match(pagePath);
            if (ComponentInfo) {
                const passParams = this.getParamsByUniqueId(uniqueId);
                for(const key in params){
                    const value = params[key];
                    // 校验参数是否为原生页面传递的回调函数
                    const xgNativeCallBack = (value && typeof value === 'object' && value.callBackID && value.valueType === 'function');
                    if (xgNativeCallBack){
                        params[key] = (info)=>{
                            if(__DEV__ && info && typeof info !== 'object'){
                                console.error('Error: When native page push to jspage, the jspage callback func only support one params ,and the typeof params only support object');
                            }
                            NativeNavigationEmitter.invokeNativeCallBack({
                                callBackID: value.callBackID,
                                params: info,
                            });
                        }
                    }
                }
                return React.createElement(ComponentInfo.component, {
                    ...params,
                    ...passParams,
                    route,
                    pageConfig: _initParams,
                    navigation: this
                });
            } else {
                // 即使没有匹配上，也删除params,避免导致内存泄露
                this.getParamsByUniqueId(uniqueId);
            }
            if(__DEV__){
                const warn = JSON.stringify(_initParams, null, 4);
                console.error('无法找到该页面。请检查参数是否有误:' + pagePath + '\n' + warn);
            }
            return 404;
        } else {
            if(__DEV__){
                const warn = JSON.stringify(_initParams, null, 4);
                console.error('renderPageByConfig func Error: lack pagePath' + warn);
            }
            return 404;
        }
    };

    /**
     * [私有]以uniqueId为key,params为value添加进入paramsTransitStack中暂时保存
     * @param uniqueId  唯一ID
     * @param params    传递的参数
     * @private
     */
    _addParamsForUniqueId = (uniqueId, params) => {
        if (uniqueId && params && typeof params === 'object') {
            this.paramsTransitStack[uniqueId] = params;
        }
    };

    /**
     * 通过uniqueId找对对应的js参数,如果找到后立即从参数栈中移除，防止内存泄漏。找不到返回空对象，表示没有参数传递。
     * @param uniqueId String
     * @return {*}
     */
    getParamsByUniqueId = (uniqueId) => {
        if (!uniqueId || (uniqueId && typeof uniqueId !== 'string')) {
            __DEV__ && console.warn('getParamsByUniqueId func Error: uniqueId need be String');
            return {};
        }
        const params = this.paramsTransitStack[uniqueId];
        if (params) {
            delete this.paramsTransitStack[uniqueId];
        }
        return params || {};
    };

    /**
     * [私有]获取随机唯一id
     * @return {string}
     * @private
     */
    _getRandomUniqueId = () => {
        return `${uuid.v4()}${(new Date()).valueOf()}`;
    };

    /**
     * [私有]补全默认页面配置参数
     *      如果没有配置pageType，默认使用JSPage。
     *      如果没有配置转场动画，默认从右到左。
     *      pagePath如果是ios，android不同，则采用匹配获取。
     * @param pageConfig
     * @return {*}
     * @private
     */
    _addDefaultPageConfig = (pageConfig) => {
        if (!pageConfig.pageType) {//默认为JS页面类型
            pageConfig.pageType = this.pageType.JSPage;
        }
        if (!pageConfig.transitionsConfig) {//使用默认从左向右的转场动画
            pageConfig.transitionsConfig = this.transitionsConfig.FromRight;
        }

        // 如果是tab页面
        if (pageConfig.pageType === this.pageType.NativeTabPage) {
            pageConfig.tabConfigs = pageConfig.tabConfigs || {};
            pageConfig.uniqueId = this._getRandomUniqueId();
            pageConfig.tabConfigs.isJS = true;//配置来源于JS
            pageConfig.tabConfigs.pages = pageConfig.tabConfigs.pages || [];
            pageConfig.tabConfigs.pages = pageConfig.tabConfigs.pages.map((item) => {
                item.pagePath = this._parsePagePath(item.pagePath);
                // 为每个页面生成唯一的key,如果item是JSPage,且存在params，则将params缓存到临时stack中
                const uniqueId = this._getRandomUniqueId();
                if(item.params && item.pageType === this.pageType.JSPage){
                    this._addParamsForUniqueId(uniqueId, item.params);
                    item.params = null;
                }
                item.uniqueId = uniqueId;
                return item;
            });
        } else if (pageConfig.pageType === this.pageType.JSPage) {
            // 为每个页面生成唯一的key,并将params缓存到临时stack中
            const uniqueId = this._getRandomUniqueId();
            this._addParamsForUniqueId(uniqueId, pageConfig.params);
            pageConfig.params = null;
            pageConfig.uniqueId = uniqueId;
        } else if (pageConfig.pageType === this.pageType.NativePage) {
            // 如果是原声页面
            pageConfig.pagePath = this._parsePagePath(pageConfig.pagePath);
            if(__DEV__ && !pageConfig.pagePath){
                console.error('缺少pagePath参数: \n' + JSON.stringify(pageConfig,null,4));
            }
            pageConfig.uniqueId = this._getRandomUniqueId();
            // 记录添加的监听
            for(const key in pageConfig.params || {}){
                const value = (pageConfig.params || {})[key];
                if (typeof value === 'function'){
                    const callBackID = `${key}${this._getRandomUniqueId()}`;
                    pageConfig.params[key] = {
                        callBackID,
                        valueType: 'function',
                    };
                    // 添加一个监听 //todo 添加移除监听
                    const listenerHander = NavigationEmitter.addListener(XGNavigationCallBackEventName, (info)=>{
                        // 过滤
                        if( info && typeof info === 'object' && info.callBackID === callBackID){
                            value(info.params);
                        }
                    });
                }
            }
        }
        return pageConfig;
    };

    /**
     * 重置整个路由栈
     * @param pageConfig 参数同push
     * @param animated   是否带动画
     * @return {Promise} bool 是否重置成功
     */
    resetRoot = (pageConfig, animated = false) => {
        pageConfig = this._addDefaultPageConfig(pageConfig);

        // 处理pageConfig.tabConfigs以及pages数组里的图片和color的参数转换
        ProcessManager.processTabConfigs(pageConfig.tabConfigs);

        // 处理单一对象的图片和color用
        // ProcessManager.processJSColorsAndJSIcon(object);
        return NativeNavigation.resetRoot(pageConfig, animated);
    };

    /**
     * 获取整个路由栈信息
     * @return {Promise} 返回路由栈数组，数据结构如下
     *            [{
     *              pagePath: 'TMMarketTabPage',
     *              pageType: 'NativeTabPage',
     *              uniqueId: 'xxxxx',          //唯一id
     *              index: 0,
     *              tabs: [{...}, {...},数据结构同下]
     *             },{
     *              pagePath: 'TMMarketTabPage',
     *              pageType: 'JSPage',
     *              uniqueId: 'xxxxx',
     *              index: 1,
     *             },{
     *              pagePath: 'TMMarketTabPage',
     *              pageType: 'NativePage',
     *              uniqueId: 'xxxxx',
     *              index: 2,
     *             }]
     */
    getRouteStack = async () => {
        return NativeNavigation.getRouteStack();
    };


    // 页面跳转拦截器函数
    pushInterceptor = null;
    // tab栏点击点击拦截器函数
    tabClickInterceptor = null;

    /**
     * 添加页面跳转的拦截器函数
     * @param pushInterceptor
     *        拦截器函数会收到两个参数
     *          @param targetPageComponent 待跳转页面Component
     *          @param actionPush          继续执行跳转动作函数
     */
    addPushPageInterceptor = (pushInterceptor) =>{
        if(typeof pushInterceptor !== 'function'){
            console.error('when you invoke addPushPageInterceptor, the params pushInterceptor should be a function');
            return;
        }
        if(this.pushInterceptor){
            console.warn('XGNavigation.addPushPageInterceptor only invoke once');
            return;
        }
        this.pushInterceptor = pushInterceptor;
    };

    /**
     * tab注册栏点击的回调函数
     * @param tabClickInterceptor
     *        拦截器函数会收到两个参数
     *          @param targetTabPageComponent 待跳转页面Component
     *          @param actionTabClick         继续执行tab切换动作的函数
     */
    addTabClickInterceptor = (tabClickInterceptor)=>{
        if(typeof tabClickInterceptor !== 'function'){
            console.error('when you invoke addTabClickInterceptor, the params tabClickInterceptor should be a function');
            return;
        }
        if(this.tabClickInterceptor){
            console.warn('XGNavigation.addTabClickInterceptor only invoke once');
            return;
        }
        this.tabClickInterceptor = tabClickInterceptor;
    };

    /**
     * 页面跳转
     * @param pageConfig Object Required
     *          .pageType          String.页面类型：默认是JSPage,目前仅支持（JSPage,NativePage,NativeTabPage）
     *          .transitionsConfig String.转场动画配置：默认是FromBottom,目前仅支持（FromRight,FromBottom,FromTop）
     *          .pagePath          String.页面路径（当pageType为JSPage,NativePage时需要需要指定页面初始化参数，代表js中页面的文件路径、或ios中viewcontroller的class名称、或android中active的class名称）
     *              pagePath支持Object{ios: 'DemoViewController',android:'DemoActivety'}
     *          .params            Object.页面初始化参数，可为空（当pageType为JSPage,NativePage时需要需要指定页面初始化参数）
     *          .tabConfigs        Tab配置（当且仅当pageType===NativeTabPage）
     *             .selectedIndex      默认选中的tab栏(可选)
     *             .tabCount           多少个tab(__ANDROID__)
     *             .tintColor          选中的Icon和title的颜色，可选项
     *             .unselectedItemTintColor 未选中Icon和title的颜色，可选项
     *             .barTintColor       tabbar的颜色，可选项
     *             .barTranslucent: false, // tabbar半透明选项，barTintColor有值则该选项无效,效果不透明 (__IOS__)
     *             .pages       Array<itemParams>.tab每一个item的配置
     *                  .pageType           数据类型同上(此时不在支持NativeTabPage)
     *                  .pagePath           数据类型同上
     *                  .params             数据类型同上
     *                  .selectTabBarIcon   tab选中icon
     *                  .unSelectTabBarIcon tab非选中的icon
     *                  .tabBarTitle        tab对应的title
     * @param animated 是否带动画
     */
    push = (pageConfig = {}, animated = true) => {
        if (!pageConfig.pagePath) {
            console.error(`You may miss pagePath: ${JSON.stringify(pageConfig, null, 4)}`);
            return;
        }
        const actionPush = ()=>{
            pageConfig = this._addDefaultPageConfig(pageConfig);
            // 处理pageConfig.tabConfigs以及pages数组里的图片和color的参数转换
            let tabConfigs = pageConfig.tabConfigs;
            ProcessManager.processTabConfigs(tabConfigs);
            // 处理单一对象的图片和color用
            // ProcessManager.processJSColorsAndJSIcon(object);
            NativeNavigation.push(pageConfig, animated);
        };
        this._invokePushIntercept(pageConfig,actionPush);
    };

    /**
     * 替换栈顶页面
     * @param pageConfig    新页面配置
     * @param animated      是否需要动画
     */
    replaceStackTopRoute = (pageConfig = {}, animated = true) => {
        if (!pageConfig.pagePath) {
            console.warn(`You may miss pagePath: ${JSON.stringify(pageConfig, null, 4)}`);
            return;
        }
        const actionPush = ()=>{
            pageConfig = this._addDefaultPageConfig(pageConfig);
            // 处理pageConfig.tabConfigs以及pages数组里的图片和color的参数转换
            let tabConfigs = pageConfig.tabConfigs;
            ProcessManager.processTabConfigs(tabConfigs);
            // 处理单一对象的图片和color用
            // ProcessManager.processJSColorsAndJSIcon(object);
            NativeNavigation.replaceStackTopRoute(pageConfig, animated);
        };
        this._invokePushIntercept(pageConfig,actionPush);
    };

    // 拦截push动作
    _invokePushIntercept = (pageConfig,actionPush)=>{
        if (!this.pushInterceptor){
            actionPush();
            return;
        }
        // 解析pagePath
        pageConfig.pagePath = this._parsePagePath(pageConfig.pagePath);
        if (!pageConfig.pageType || pageConfig.pageType === this.pageType.JSPage){
            const {component} = this.appRoutes[pageConfig.pagePath.toLowerCase()] || {};
            if (!component){
                __DEV__ && console.error('navigation.(push\replaceStackTopRoute) func Error: can`t push to ' + JSON.stringify(pageConfig));
                return;
            }
            const canJump = this.pushInterceptor(component,actionPush);
            canJump && actionPush();
            return;
        } else if(pageConfig.pageType === this.pageType.NativePage || pageConfig.pageType === this.pageType.NativeTabPage) {
            const obj = this.appRoutes[pageConfig.pagePath.toLowerCase()] || {};
            if (Object.keys(obj).length){
                const canJump = this.pushInterceptor(obj,actionPush);
                canJump && actionPush();
                return;
            }
        }
        actionPush();
    };

    /**
     * 收到tab点击的通知
     */
    _receivedTabClickEmitter = (obj = {})=>{
        const {
            tabRoute = {},
            tabBarRoute = {}
        } = obj;
        let {
            index,
            pagePath,
            pageType,
            uniqueId,
        } = tabRoute;
        const actionTabClick = ()=>{
            this.setTabBarSelectedIndex(tabBarRoute,index);
        };
        if(this.tabClickInterceptor){
            if (pageType === this.pageType.JSPage){
                const {component} = this.appRoutes[pagePath.toLowerCase()] || {};
                const canTabClick = this.tabClickInterceptor(tabBarRoute,component,actionTabClick);
                canTabClick && actionTabClick();
                return;
            } else if (pageType === this.pageType.NativePage){ //todo 安卓存在bug
                const obj = this.appRoutes[pagePath.toLowerCase()] || {};
                if (Object.keys(obj).length){
                    const canTabClick = this.tabClickInterceptor(tabBarRoute,obj,actionTabClick);
                    canTabClick && actionTabClick();
                    return;
                }
            }
        }
        actionTabClick();
    };

    /**
     * 返回上一级页面
     * @param animated 是否带动画
     */
    pop = (animated = true) => {
        NativeNavigation.pop(animated);
    };

    /**
     * 返回到指定页面     ANDROID默认动画，不支持animated参数
     * @param route     想要返回的页面
     * @param animated  是否带动画
     */
    popToRoute = (route, animated = true) => {
        NativeNavigation.popToRoute(route, animated);
    };

    /**
     * 返回到路由栈底    ANDROID默认动画，不支持animated参数
     * @param animated 是否带动画
     */
    popToRoot = (animated = true) => {
        NativeNavigation.popToRoot(animated);
    };

    /**
     * 设置tab选中的Index
     * @param route     当前tab子页面的route
     * @param newIndex  需要选中的下标
     * 注意：如果当前route对应的页面并不存在于Tab容器里，则不执行任何效果
     */
    setTabBarSelectedIndex = (route, newIndex) => {
        NativeNavigation.setTabBarSelectedIndex(route, newIndex);
    };

    /**
     * 设置tab对应index栏bar的角标参数
     * @param tabRoute  tabBar页面的route object
     * @param index     第几栏            number
     * @param badgeValue角标值            string 如果未空，表示清空
     * 注意：如果当前route对应的页面并不存在于Tab容器里，则不执行任何效果
     */
    setTabBarItemBadgeValue = (tabRoute, index, badgeValue = '')=>{
        NativeNavigation.setTabBarItemBadgeValue(tabRoute, index,badgeValue);
    };

    /**
     * 判断当前页面是否处于tab容器里面
     * @param route 当前页面的route
     * @return {Promise.<bool>} 是否为tab容器里的子页面
     */
    isChildTab = (route) => {
        return NativeNavigation.isChildTab(route);
    };

    /**
     * 主动添加splash 进行占位显示
     * (如果当前splash已经在展示中，则doNothing)
     */
    showLaunchImageOnWindow = ()=>{
        NativeNavigation.showLaunchImageOnWindow();
    };

    /**
     * 主动移除splash占位图
     * (如果当前splash已消失，则doNothing)
     */
    removeLaunchImageFromWindow = () => {
        NativeNavigation.removeLaunchImageFromWindow();
    };

    /**
     * 开启关闭侧滑手势(仅支持IOS)
     * @param route             路由
     * @param allowPopGesture   侧滑手势是否打开
     * 如果route为tabbar上面的一个子页面，则allowPopGesture对tabbar生效
     */
    allowPopGestureRecognizer = (route,allowPopGesture) =>{
        if (Platform.OS === 'android') return;
        NativeNavigation.allowPopGestureRecognizer(route,allowPopGesture);
    };

    /*------------------------------弹框------------------------------*/

    /**
     * 初始化弹框
     * @params alertsConfigArr app全部弹框配置
     */
    initializeAlert = (alertsConfigArr)=>{
        if(!alertsConfigArr || !(alertsConfigArr instanceof Array)){
            console.warn('alertsConfigArr should be array');
            return;
        }
        alertsConfigArr.forEach((component)=>{
            const {alertPath} = component;
            if (!alertPath){
                console.warn('alert component may miss static alertPath');
            } else {
                this.alertComponents[alertPath.toLowerCase()] = component;
            }
        });
    };

    /**
     * 调用弹框
     * @param alertConfig object 包含如下参数
     *   String         alertPath 弹框位置
     *   Object         params    弹框参数
     *   Enum-String    level     弹框展示的位置层级（参考this.alertLevel的类型）
     *   Object         bindRoute 绑定到的路由页面(当level === PageLevel是，必须填写)
     * @retun alertId 返回一个弹框标识。
     */
    alert = (alertConfig = {})=>{
        const {
            alertPath,
            params,
            level = this.alertLevel.PageLevel,
            bindRoute,
        } = alertConfig;

        //abort, lack necessary parameter
        if(!alertPath){
            __DEV__ && console.error('xgnavigation.alertPath isRequired');
            return null;
        }
        const component = this.alertComponents[alertPath.toLowerCase()];
        if(!component){
            __DEV__ && console.error('navigation.alert func Error：can`t find Alert By alertPath:' + alertPath);
            return null;
        }
        if(level === this.alertLevel.PageLevel && !bindRoute){
            __DEV__ && console.error('when alert show level use PageLevel, you should assign bindRoute where alertView add to');
            return null;
        }

        const alertId = this._getRandomUniqueId();
        this._addParamsForUniqueId(alertId,params);
        NativeNavigation.alert({
            alertPath,
            level,
            alertId,
            bindRoute: bindRoute || {}
        });
        return alertId;
    };


    /**
     * 弹框是否正在展示
     * @param alertId 弹框id
     * @return <promise> bool 是否展示中
     */
    alertIsShow = async (alertId)=>{
        if (!alertId) return false;
        return NativeNavigation.alertIsShow(alertId);
    };

    /**
     * 移除弹框，如果弹框存在的话。
     */
    removeAlert = (alertId)=>{
        alertId && NativeNavigation.removeAlert(alertId);
    };

    _xgconsoleWarn = (obj = {})=>{
        const {
            consoleText
        } = obj;
        consoleText && Console.warn(consoleText);
    };

    /**
     * 渲染弹框组件。
     */
    renderAlertByConfig = (initParams = {})=>{
        const {
            alertPath,
            alertId,
            params = {},
        } = initParams;
        if(!alertId){
            console.error('renderAlertByConfig func Error: alertId isRequired!!!');
            return null;
        }
        if(!alertPath){
            console.error('renderAlertByConfig func Error: alertPath isRequired!!!');
            return null;
        }
        // 字符串alertPath映射的component组件
        const component = this.alertComponents[alertPath.toLowerCase()];
        if(!component){
            console.error(`renderAlertByConfig func Error: Can't find alert component by alertPath: ${alertPath}`);
            return null;
        }
        const passParams = this.getParamsByUniqueId(alertId);
        for(const key in params){
            const value = params[key];
            const isNativeCallBack = value && typeof value === 'object' && value.callBackID && value.valueType === 'function';
            if (isNativeCallBack){
                params[key] = (info)=>{
                    NativeNavigationEmitter.invokeNativeCallBack({
                        callBackID: value.callBackID,
                        params: info,
                    })
                };
            }
        }
        return React.createElement(component, {
            ...params,
            ...passParams,
            alertId,
            navigation: this
        });

    };
}

const navigation = new XGNavigation();
NavigationEmitter.addListener('XGNavigationTabClick',navigation._receivedTabClickEmitter);
Platform.OS === 'android' && NavigationEmitter.addListener('XGConsole',navigation._xgconsoleWarn);
export default navigation;