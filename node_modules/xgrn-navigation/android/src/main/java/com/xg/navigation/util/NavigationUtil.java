package com.xg.navigation.util;

import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentationMagician;
import android.text.TextUtils;
import android.util.Log;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;

import com.facebook.react.ReactApplication;
import com.facebook.react.ReactInstanceManager;
import com.facebook.react.ReactRootView;
import com.facebook.react.bridge.Arguments;
import com.facebook.react.bridge.ReactContext;
import com.facebook.react.bridge.ReadableMap;
import com.facebook.react.bridge.WritableMap;
import com.xg.navigation.AlertDialog;
import com.xg.navigation.BuildConfig;
import com.xg.navigation.JSCallBack;
import com.xg.navigation.NativeNavigationEmitter;
import com.xg.navigation.NavigationActivity;
import com.xg.navigation.R;
import com.xg.navigation.bridge.BundleConverter;
import com.xg.navigation.constants.NavigationConstants;
import com.xg.navigation.delegates.BaseDelegate;
import com.xg.navigation.delegates.NavigationDelegate;
import com.xg.navigation.delegates.ReactDelegate;
import com.xg.navigation.delegates.bottom.BaseBottomDelegate;
import com.xg.navigation.view.NavigationBottomDelegate;
import com.xg.navigation.view.ReactFragment;
import com.xg.navigation.view.ReactItem;
import com.xg.navigation.view.ReactItemContainer;

import java.util.List;
import java.util.UUID;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.TimeUnit;

import io.reactivex.functions.Consumer;
import me.yokeyword.fragmentation.ExtraTransaction;
import me.yokeyword.fragmentation.ISupportFragment;
import me.yokeyword.fragmentation.SupportHelper;

public class NavigationUtil {

    public NavigationUtil() {

    }

    public static void subscribeUniqueId(String id) {
        SujectUtils.getInstance()
                .getAndFilter(id,String.class)
                .delay(4, TimeUnit.SECONDS)
                .subscribe(new Consumer<String>() {
                    @Override
                    public void accept(String s) throws Exception {
                        Log.d("zhouchangping", "unregisterJsCallBack");
                        if (s != null && NavigationUtil.callBackHashMap.containsKey(s))
                            NavigationUtil.unregisterJsCallBack(s);
                    }
                }, new Consumer<Throwable>() {
                    @Override
                    public void accept(Throwable s) throws Exception {
                        Log.e("zhouchangping", s.getMessage() == null ? s.getMessage() : "");
                    }
                });
    }

    public static final ConcurrentHashMap<String, JSCallBack> callBackHashMap =
            new ConcurrentHashMap<>();

    public static void pushWithTransition(ExtraTransaction extraTransaction, String transitionConfig, BaseDelegate baseDelegate,
                                          boolean isAnimated, boolean isPop) {


        if (extraTransaction == null || TextUtils.isEmpty(transitionConfig) || baseDelegate == null) {
            return;
        }

        if (!isAnimated) {
            if (isPop) {
                extraTransaction
                        .setCustomAnimations(R.anim.pop_exit_no_anim, R.anim.pop_exit_no_anim,
                                R.anim.pop_exit_no_anim, R.anim.pop_exit_no_anim)
                        .startWithPop(baseDelegate);
            } else {
                extraTransaction
                        .setCustomAnimations(R.anim.pop_exit_no_anim, R.anim.pop_exit_no_anim,
                                R.anim.pop_exit_no_anim, R.anim.pop_exit_no_anim)
                        .start(baseDelegate);
            }

            return;
        }

        switch (transitionConfig) {
            case NavigationConstants.FROM_RIGHT:
                if (isPop) {
                    extraTransaction
                            .setCustomAnimations(R.anim.h_fragment_enter, R.anim.h_fragment_pop_exit,
                                    R.anim.h_fragment_pop_enter, R.anim.h_fragment_exit)
                            .startWithPop(baseDelegate);
                } else {
                    extraTransaction
                            .setCustomAnimations(R.anim.h_fragment_enter, R.anim.h_fragment_pop_exit,
                                    R.anim.h_fragment_pop_enter, R.anim.h_fragment_exit)
                            .start(baseDelegate);
                }
                break;
            case NavigationConstants.FROM_BOTTOM:
                if (isPop) {
                    extraTransaction
                            .setCustomAnimations(R.anim.v_fragment_enter, R.anim.v_fragment_pop_exit,
                                    R.anim.v_fragment_pop_enter, R.anim.v_fragment_exit)
                            .startWithPop(baseDelegate);
                } else {
                    extraTransaction
                            .setCustomAnimations(R.anim.v_fragment_enter, R.anim.v_fragment_pop_exit,
                                    R.anim.v_fragment_pop_enter, R.anim.v_fragment_exit)
                            .start(baseDelegate);
                }
                break;
            default:
                break;
        }
    }

    public static String getPageType(Fragment fragment) {
        if (fragment == null) {
            return "unknownPageType";
        }

        if (fragment instanceof NavigationBottomDelegate) {
            return NavigationConstants.NATIVE_TAB_PAGE;
        }

        if (fragment instanceof ReactDelegate) {
            return NavigationConstants.JS_PAGE;
        }

        if (fragment instanceof ReactItemContainer) {
            ISupportFragment topChild = SupportHelper.getTopFragment(fragment.getChildFragmentManager());
            if (topChild != null && (topChild instanceof ReactDelegate)) {
                return NavigationConstants.JS_PAGE;
            }
        }

        return NavigationConstants.NATIVE_PAGE;
    }

    public static String getPagePath(Fragment fragment) {

        if (fragment == null) {
            return "unknownPagePath";
        }

        if (!(fragment instanceof ReactItemContainer)) {
            return fragment.getTag();
        }

        ISupportFragment child = SupportHelper.getTopFragment(fragment.getChildFragmentManager());

        if (child == null) {
            return "unknownPagePath";
        }

        if (child instanceof ReactItem) {
            try {
                return (String) ((ReactItem) child).setNavigationParams().get("pagePath");
            } catch (Exception e) {
                String tag = ((ReactItem) child).getTag();
                return tag == null ? "" : tag;
            }
        } else {
            try {
                return ((Fragment) child).getTag();
            } catch (Exception e) {
                return "unknownPagePath";
            }
        }
    }

    /**
     * 仅js端调用：指定uuid对应的fragment是否为baseBottomDelegate的子标签页
     */
    public static Fragment matchTabs(BaseBottomDelegate baseBottomDelegate, String uuid) {
        if (baseBottomDelegate == null || TextUtils.isEmpty(uuid)) {
            return null;
        }
        List<Fragment> fragments = FragmentationMagician.getActiveFragments(baseBottomDelegate.getChildFragmentManager());
        int size = fragments.size();
        for (int i = size - 1; i >= 0; --i) {
            Fragment currentChild = fragments.get(i);
            if (currentChild == null) {
                continue;
            }

            if (!(currentChild instanceof ReactItemContainer)) {
                continue;
            }

            ISupportFragment child = SupportHelper.getTopFragment(currentChild.getChildFragmentManager());
            if (child == null) {
                continue;
            }

            if (!(child instanceof ReactItem)) {
                continue;
            }

            try {
                String childUUID = (String) ((ReactItem) child).setNavigationParams().get("uniqueId");
                if (uuid.equals(childUUID)) {
                    return baseBottomDelegate;
                }
            } catch (Exception ignored) {
            }
        }

        return null;
    }

    public static String getPageUniqueId(Fragment fragment) {
        if (fragment == null) {
            return "";
        }

        if (fragment instanceof NavigationBottomDelegate) {
            try {
                return (String) ((NavigationBottomDelegate) fragment).setNavigationParams().get("uniqueId");
            } catch (Exception e) {
                return "";
            }
        }

        if (fragment instanceof ReactDelegate) {
            try {
                return (String) ((ReactDelegate) fragment).setNavigationParams().get("uniqueId");
            } catch (Exception e) {
                return "";
            }
        }

        if (fragment instanceof ReactItemContainer) {
            ISupportFragment topChild = SupportHelper.getTopFragment(fragment.getChildFragmentManager());
            if (topChild != null && (topChild instanceof ReactDelegate)) {
                try {
                    return (String) ((ReactDelegate) topChild).setNavigationParams().get("uniqueId");
                } catch (Exception e) {
                    return "";
                }
            }
        }

        if (fragment instanceof NavigationDelegate) {
            return ((NavigationDelegate) fragment).getJsId();
        }

        return "";
    }

    /**
     * 包含默认跳转参数
     * {@link NavigationUtil#push(String, String, String, JSCallBack, Bundle)}
     *
     * @param pageType
     * @param pagePath
     * @param jsCallBack
     * @param params
     */
    public static void push(String pageType, String pagePath, JSCallBack jsCallBack, Bundle params) {
        push(pageType, pagePath, "FromRight", jsCallBack, params, false, false);
    }

    /**
     * 包含默认跳转参数
     * {@link NavigationUtil#push(String, String, String, JSCallBack, Bundle, Boolean)}
     *
     * @param pageType
     * @param pagePath
     * @param jsCallBack
     * @param params
     */
    public static void push(String pageType, String pagePath, JSCallBack jsCallBack, Bundle params, boolean isPop) {
        push(pageType, pagePath, "FromRight", jsCallBack, params, false, isPop);
    }

    /**
     * 包含默认跳转参数
     * {@link NavigationUtil#push(String, String, String, JSCallBack, Bundle, Boolean)}
     *
     * @param pageType
     * @param pagePath
     * @param jsCallBack
     * @param params
     */
    public static void push(String pageType, String pagePath, JSCallBack jsCallBack, Bundle params, boolean isAnimated, boolean isPop) {
        push(pageType, pagePath, "FromRight", jsCallBack, params, isAnimated, isPop);
    }


    /**
     * 从原生跳转页面到Js页面，需要指定 JsCallBack
     * 采用
     *
     * @param pageType
     * @param pagePath
     * @param transitionConfig
     * @param callBack
     * @param params
     */
    public static void push(String pageType, String pagePath, String transitionConfig, JSCallBack callBack, Bundle params, boolean isAnimated, boolean isPop) {
        Bundle bundle = new Bundle();
        bundle.putString("pageType", pageType);
        bundle.putString("pagePath", pagePath);
        bundle.putString("transitionsConfig", transitionConfig);

        String callBackID = NavigationUtil.generateJsCallBackId();
        bundle.putBundle("params", params);
        Bundle value = new Bundle();
        value.putString("callBackID", callBackID);
        value.putString("valueType", "function");
        params.putBundle("onSubmitCallBack", value);

        NavigationUtil.registerJsCallBack(callBackID, callBack);

        ExtraTransaction extraTransaction = NavigationActivity.currentActivity.extraTransaction()
                .setTag(pagePath);
        ReactDelegate delegate = ReactFragment.newInstance(bundle);
        NavigationUtil.pushWithTransition(extraTransaction, transitionConfig,
                delegate, isAnimated, isPop);

    }

    public static void registerJsCallBack(String callBackID, JSCallBack callBack) {
        callBackHashMap.put(callBackID, callBack);
    }

    public static void unregisterJsCallBack(String callBackID) {
        callBackHashMap.remove(callBackID);
    }

    public static JSCallBack getJsCallBackByID(String callBackID) {
        return callBackHashMap.get(callBackID);
    }

    public static String generateAlertId() {
        return "alertId#" + UUID.randomUUID() + System.nanoTime();
    }

    public static String generateJsCallBackId() {
        return "nativeCallBack#" + UUID.randomUUID() + System.nanoTime();
    }

    public static void pushToJsPage(String path) {
        pushToJsPage(path, true);
    }

    public static void pushToJsPage(String path, Bundle bundle) {
        pushToJsPage(path, true, bundle);
    }

    public static void pushToJsPage(String path, boolean animated) {

        pushToJsPage(path, animated, true, null);
    }

    public static void pushToJsPage(String path, boolean animated, Bundle bundle) {

        pushToJsPage(path, animated, true, bundle);
    }

    public static void pushToJsPage(String path, boolean animated, boolean isFromRight, Bundle rawBundle) {

        if (TextUtils.isEmpty(path)) {
            return;
        }

        Bundle bundle = rawBundle == null ? (new Bundle()) : rawBundle;
        //noinspection UnnecessaryLocalVariable
        String pagePath = path;
        bundle.putString("uniqueId", UUID.randomUUID().toString());

        if (isFromRight) {
            bundle.putString("transitionsConfig", "FromRight");
        } else {
            bundle.putString("transitionsConfig", "FromBottom");
        }

        bundle.putString("pageType", "JSPage");
        bundle.putString("pagePath", pagePath);

        ExtraTransaction extraTransaction = NavigationActivity.currentActivity.extraTransaction()
                .setTag(pagePath);
        NavigationUtil.pushWithTransition(extraTransaction, NavigationConstants.FROM_RIGHT,
                ReactFragment.newInstance(bundle), animated, false);
    }

    private static final ConcurrentHashMap alertMap =
            new ConcurrentHashMap<>();

    private static final ConcurrentHashMap alertViewMap =
            new ConcurrentHashMap<>();

    /**
     * 弹框显示
     */
    public static void alert(final ReadableMap alertConfig) {
        System.out.println("alert " + alertConfig.toString());

        final String alertId = alertConfig.hasKey("alertId") ?
                alertConfig.getString("alertId") : NavigationUtil.generateAlertId();
        String alertPath = alertConfig.getString("alertPath");
        String level = alertConfig.getString("level");
        final ReadableMap params = alertConfig.hasKey("params") ? alertConfig.getMap("params") : Arguments.createMap();
        if (TextUtils.equals(level, "PageLevel") && alertConfig.hasKey("PageLevel")) {
            ReadableMap bindRoute;
            bindRoute = alertConfig.getMap("bindRoute");
        }
        final NavigationActivity activity = NavigationActivity.currentActivity;

        //level = "NavigationLevel";
        if (TextUtils.equals(level, "PageLevel")) {
            activity.runOnUiThread(new Runnable() {
                @Override
                public void run() {
                    AlertDialog alertDialog = new AlertDialog(activity);
                    alertDialog.startReactNativeApplication(BundleConverter.toBundle(alertConfig));
                    alertDialog.show();
                    System.out.println("alertId add " + alertId);
                    alertMap.put(alertId, alertDialog);
                    alertMap.put("params", params);
                }
            });
        } else if (TextUtils.equals(level, "NavigationLevel") ||
                TextUtils.equals(level, "WindowLevel")) {
            activity.runOnUiThread(new Runnable() {
                @Override
                public void run() {
                    /**
                     * linearLayout 作为ActivityContentView
                     */
                    ReactRootView reactRootView = new ReactRootView(activity);
                    ReactInstanceManager reactInstanceManager =
                            ((ReactApplication) activity.getApplication())
                                    .getReactNativeHost().getReactInstanceManager();
                    LinearLayout linearLayout = new LinearLayout(activity);
                    LinearLayout.LayoutParams layoutParams = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);
                    //layoutParams.setMargins(10,0,10,0);
                    reactRootView.setLayoutParams(layoutParams);
                    linearLayout.addView(reactRootView);
                    activity.addContentView(linearLayout, new ViewGroup.LayoutParams(
                            ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT
                    ));
                    reactRootView.startReactApplication(reactInstanceManager,
                            "alert", BundleConverter.toBundle(alertConfig));
                    alertViewMap.put(alertId, linearLayout);
                    alertViewMap.put("params", params);
                }
            });
        }
    }

    public static void removeAlert(String alertId) {
        System.out.println("remove alert " + alertId + " " + alertMap.contains(alertId));
        if (alertMap.containsKey(alertId)) {
            AlertDialog dialog = (AlertDialog) alertMap.get(alertId);
            dialog.dismiss();
            alertMap.remove(alertId);

        }

        if (alertViewMap.containsKey(alertId)) {
            final View target = (View) alertViewMap.get(alertId);
            final ViewGroup parent = (ViewGroup) target.getParent();
            parent.post(new Runnable() {
                @Override
                public void run() {
                    parent.removeView(target);
                }
            });

            alertViewMap.remove(alertId);
        }

    }

    public static Boolean alertIsShow(String alertId) {
        return alertMap.containsKey(alertId)
                || alertViewMap.containsKey(alertId);
    }

    public static void push(String pageType, String pagePath, String transitionsConfig, boolean animated, Bundle params){
        if (TextUtils.isEmpty(pageType) || TextUtils.isEmpty(pagePath)) {
            return;
        }
        Bundle bundle = new Bundle();
        bundle.putBundle("params", params);
        bundle.putString("uniqueId", UUID.randomUUID().toString());
        switch (pageType) {
            case NavigationConstants.JS_PAGE: {
                ExtraTransaction extraTransaction = NavigationActivity.currentActivity.extraTransaction()
                        .setTag(pagePath);
                NavigationUtil.pushWithTransition(extraTransaction, transitionsConfig,
                        ReactFragment.newInstance(bundle), animated, false);
                break;
            }
            case NavigationConstants.NATIVE_PAGE: {
                NavigationDelegate targetDelegate;
                try {
                    Class targetClass = Class.forName(pagePath);
                    targetDelegate = (NavigationDelegate) targetClass.newInstance();
                } catch (Exception e) {
                    e.printStackTrace();
                    return;
                }
                if (targetDelegate == null) {
                    return;
                }
                targetDelegate.setArguments(bundle);

                ExtraTransaction extraTransaction = NavigationActivity.currentActivity.extraTransaction()
                        .setTag(pagePath);
                NavigationUtil.pushWithTransition(extraTransaction, transitionsConfig,
                        targetDelegate, animated, false);
                break;
            }
            case NavigationConstants.NATIVE_TAB_PAGE: {
                ExtraTransaction extraTransaction = NavigationActivity.currentActivity.extraTransaction()
                        .setTag(pagePath);
                NavigationUtil.pushWithTransition(extraTransaction, transitionsConfig,
                        NavigationBottomDelegate.newInstance(bundle), animated, false);
                break;
            }
            default:break;
        }
    }

}
